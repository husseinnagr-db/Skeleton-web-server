/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "webserver_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace thrift { namespace webserver {


ApiKey::~ApiKey() noexcept {
}


void ApiKey::__set_orgName(const std::string& val) {
  this->orgName = val;
}

void ApiKey::__set_keyName(const std::string& val) {
  this->keyName = val;
}
std::ostream& operator<<(std::ostream& out, const ApiKey& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ApiKey::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_orgName = false;
  bool isset_keyName = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->orgName);
          isset_orgName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->keyName);
          isset_keyName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_orgName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_keyName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ApiKey::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ApiKey");

  xfer += oprot->writeFieldBegin("orgName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->orgName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("keyName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->keyName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ApiKey &a, ApiKey &b) {
  using ::std::swap;
  swap(a.orgName, b.orgName);
  swap(a.keyName, b.keyName);
}

ApiKey::ApiKey(const ApiKey& other0) {
  orgName = other0.orgName;
  keyName = other0.keyName;
}
ApiKey& ApiKey::operator=(const ApiKey& other1) {
  orgName = other1.orgName;
  keyName = other1.keyName;
  return *this;
}
void ApiKey::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ApiKey(";
  out << "orgName=" << to_string(orgName);
  out << ", " << "keyName=" << to_string(keyName);
  out << ")";
}


ReadResult::~ReadResult() noexcept {
}


void ReadResult::__set_returnCode(const int32_t val) {
  this->returnCode = val;
}

void ReadResult::__set_res(const std::string& val) {
  this->res = val;
__isset.res = true;
}

void ReadResult::__set_cursor(const std::string& val) {
  this->cursor = val;
__isset.cursor = true;
}
std::ostream& operator<<(std::ostream& out, const ReadResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ReadResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_returnCode = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->returnCode);
          isset_returnCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->res);
          this->__isset.res = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cursor);
          this->__isset.cursor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_returnCode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ReadResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ReadResult");

  xfer += oprot->writeFieldBegin("returnCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->returnCode);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.res) {
    xfer += oprot->writeFieldBegin("res", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->res);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cursor) {
    xfer += oprot->writeFieldBegin("cursor", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->cursor);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ReadResult &a, ReadResult &b) {
  using ::std::swap;
  swap(a.returnCode, b.returnCode);
  swap(a.res, b.res);
  swap(a.cursor, b.cursor);
  swap(a.__isset, b.__isset);
}

ReadResult::ReadResult(const ReadResult& other2) {
  returnCode = other2.returnCode;
  res = other2.res;
  cursor = other2.cursor;
  __isset = other2.__isset;
}
ReadResult& ReadResult::operator=(const ReadResult& other3) {
  returnCode = other3.returnCode;
  res = other3.res;
  cursor = other3.cursor;
  __isset = other3.__isset;
  return *this;
}
void ReadResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ReadResult(";
  out << "returnCode=" << to_string(returnCode);
  out << ", " << "res="; (__isset.res ? (out << to_string(res)) : (out << "<null>"));
  out << ", " << "cursor="; (__isset.cursor ? (out << to_string(cursor)) : (out << "<null>"));
  out << ")";
}


MyException::~MyException() noexcept {
}


void MyException::__set_errorCode(const int32_t val) {
  this->errorCode = val;
}

void MyException::__set_errorMessage(const std::string& val) {
  this->errorMessage = val;
}
std::ostream& operator<<(std::ostream& out, const MyException& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t MyException::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->errorCode);
          this->__isset.errorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errorMessage);
          this->__isset.errorMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MyException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MyException");

  xfer += oprot->writeFieldBegin("errorCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->errorCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errorMessage", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errorMessage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MyException &a, MyException &b) {
  using ::std::swap;
  swap(a.errorCode, b.errorCode);
  swap(a.errorMessage, b.errorMessage);
  swap(a.__isset, b.__isset);
}

MyException::MyException(const MyException& other4) : TException() {
  errorCode = other4.errorCode;
  errorMessage = other4.errorMessage;
  __isset = other4.__isset;
}
MyException& MyException::operator=(const MyException& other5) {
  errorCode = other5.errorCode;
  errorMessage = other5.errorMessage;
  __isset = other5.__isset;
  return *this;
}
void MyException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MyException(";
  out << "errorCode=" << to_string(errorCode);
  out << ", " << "errorMessage=" << to_string(errorMessage);
  out << ")";
}

const char* MyException::what() const noexcept {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: MyException";
  }
}

}} // namespace

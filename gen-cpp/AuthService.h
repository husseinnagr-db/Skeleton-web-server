/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef AuthService_H
#define AuthService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "authserver_types.h"

namespace thrift { namespace authserver {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class AuthServiceIf {
 public:
  virtual ~AuthServiceIf() {}
  virtual bool authCheck(const std::string& userkey, const std::string& database, const std::vector<std::string> & tables) = 0;
};

class AuthServiceIfFactory {
 public:
  typedef AuthServiceIf Handler;

  virtual ~AuthServiceIfFactory() {}

  virtual AuthServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(AuthServiceIf* /* handler */) = 0;
  };

class AuthServiceIfSingletonFactory : virtual public AuthServiceIfFactory {
 public:
  AuthServiceIfSingletonFactory(const ::std::shared_ptr<AuthServiceIf>& iface) : iface_(iface) {}
  virtual ~AuthServiceIfSingletonFactory() {}

  virtual AuthServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(AuthServiceIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<AuthServiceIf> iface_;
};

class AuthServiceNull : virtual public AuthServiceIf {
 public:
  virtual ~AuthServiceNull() {}
  bool authCheck(const std::string& /* userkey */, const std::string& /* database */, const std::vector<std::string> & /* tables */) override {
    bool _return = false;
    return _return;
  }
};

typedef struct _AuthService_authCheck_args__isset {
  _AuthService_authCheck_args__isset() : userkey(false), database(false), tables(false) {}
  bool userkey :1;
  bool database :1;
  bool tables :1;
} _AuthService_authCheck_args__isset;

class AuthService_authCheck_args {
 public:

  AuthService_authCheck_args(const AuthService_authCheck_args&);
  AuthService_authCheck_args& operator=(const AuthService_authCheck_args&);
  AuthService_authCheck_args() noexcept
                             : userkey(),
                               database() {
  }

  virtual ~AuthService_authCheck_args() noexcept;
  std::string userkey;
  std::string database;
  std::vector<std::string>  tables;

  _AuthService_authCheck_args__isset __isset;

  void __set_userkey(const std::string& val);

  void __set_database(const std::string& val);

  void __set_tables(const std::vector<std::string> & val);

  bool operator == (const AuthService_authCheck_args & rhs) const
  {
    if (!(userkey == rhs.userkey))
      return false;
    if (!(database == rhs.database))
      return false;
    if (!(tables == rhs.tables))
      return false;
    return true;
  }
  bool operator != (const AuthService_authCheck_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthService_authCheck_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AuthService_authCheck_pargs {
 public:


  virtual ~AuthService_authCheck_pargs() noexcept;
  const std::string* userkey;
  const std::string* database;
  const std::vector<std::string> * tables;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AuthService_authCheck_result__isset {
  _AuthService_authCheck_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _AuthService_authCheck_result__isset;

class AuthService_authCheck_result {
 public:

  AuthService_authCheck_result(const AuthService_authCheck_result&);
  AuthService_authCheck_result& operator=(const AuthService_authCheck_result&);
  AuthService_authCheck_result() noexcept
                               : success(0) {
  }

  virtual ~AuthService_authCheck_result() noexcept;
  bool success;
   ::thrift::webserver::MyException ex;

  _AuthService_authCheck_result__isset __isset;

  void __set_success(const bool val);

  void __set_ex(const  ::thrift::webserver::MyException& val);

  bool operator == (const AuthService_authCheck_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const AuthService_authCheck_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AuthService_authCheck_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AuthService_authCheck_presult__isset {
  _AuthService_authCheck_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _AuthService_authCheck_presult__isset;

class AuthService_authCheck_presult {
 public:


  virtual ~AuthService_authCheck_presult() noexcept;
  bool* success;
   ::thrift::webserver::MyException ex;

  _AuthService_authCheck_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class AuthServiceClient : virtual public AuthServiceIf {
 public:
  AuthServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  AuthServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool authCheck(const std::string& userkey, const std::string& database, const std::vector<std::string> & tables) override;
  void send_authCheck(const std::string& userkey, const std::string& database, const std::vector<std::string> & tables);
  bool recv_authCheck();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AuthServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<AuthServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (AuthServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_authCheck(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AuthServiceProcessor(::std::shared_ptr<AuthServiceIf> iface) :
    iface_(iface) {
    processMap_["authCheck"] = &AuthServiceProcessor::process_authCheck;
  }

  virtual ~AuthServiceProcessor() {}
};

class AuthServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AuthServiceProcessorFactory(const ::std::shared_ptr< AuthServiceIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< AuthServiceIfFactory > handlerFactory_;
};

class AuthServiceMultiface : virtual public AuthServiceIf {
 public:
  AuthServiceMultiface(std::vector<std::shared_ptr<AuthServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AuthServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<AuthServiceIf> > ifaces_;
  AuthServiceMultiface() {}
  void add(::std::shared_ptr<AuthServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool authCheck(const std::string& userkey, const std::string& database, const std::vector<std::string> & tables) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->authCheck(userkey, database, tables);
    }
    return ifaces_[i]->authCheck(userkey, database, tables);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class AuthServiceConcurrentClient : virtual public AuthServiceIf {
 public:
  AuthServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  AuthServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool authCheck(const std::string& userkey, const std::string& database, const std::vector<std::string> & tables) override;
  int32_t send_authCheck(const std::string& userkey, const std::string& database, const std::vector<std::string> & tables);
  bool recv_authCheck(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#endif
